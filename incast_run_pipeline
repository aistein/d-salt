#!/bin/bash

# import configurations (UNSAFE!)
if [ ! $# -eq 0 ]; then
	config_file="$1"
	source "$config_file"
else
	echo "usage: ./incast_run_pipeline <config-file>.conf";
	exit 1;
fi

# script deploy location
repo=$(pwd -P)

# script start-time
start=`date +%s`

# function to wait for a bunch of jobs to finish
synchronization_barrier () {
	arr=("$@")
	for pid in "${arr[@]}"; do
		wait "$pid"
	done
}

# date as UID for gcloud buckets
date=`date +"%m_%d_%Y-%H-%M"`

# make necessary directories
if [ ! -d "results/incast" ]; then
	mkdir -p results/incast/plots
	mkdir -p results/incast/data
	mkdir -p $ns3/results/incast
	mkdir -p tmp/incast
	mkdir -p logs/incast
fi

# clean out all old files from previous/local runs
if [ "$clean" = true ]; then
	sudo rm -f *timebounds.txt
	sudo rm -f *mv_avg_bounds.txt
	sudo rm -f *.png
	sudo rm -f *.config
	sudo rm -f *config.txt
	sudo rm -f *.log
	sudo rm -f tmp/incast/*
	sudo rm -f logs/incast/*
	sudo rm -f results/incast/plots/*
	sudo rm -f results/incast/data/*
	sudo rm -f $ns3/results/incast/*
fi

# redirect stdout and stderr to logfile
logfile="./incast_run_pipeline-${date}.log"
echo "-I- incast_run_pipeline: running..."
echo "-I- incast_run_pipeline: to check status, run \"tail -f ${logfile}\""
exec > "$logfile" 2>&1

# print run configurations to config file for reference
configfile="./incast_run_pipeline-${date}-config.txt"
echo "description:      $description"			>> "$configfile"
echo "incast-senders:   $senders"			>> "$configfile"
echo "sweepdegrees:     $sweepdegrees"                  >> "$configfile"
echo "debug:            $debug"                         >> "$configfile"
echo "flows per degree: $flows"				>> "$configfile"
echo "buff:         	$buff" 				>> "$configfile"
echo "thresh:       	$thresh" 			>> "$configfile"
echo "samethresh:      	$samethresh" 			>> "$configfile"
echo "nonblind:       	$nonblind"			>> "$configfile"
echo "alphas:       	(${alphas[*]})" 		>> "$configfile"
echo "profile:     	incast"		 		>> "$configfile"

# initialize pid arrays for new jobs, and zero proccount
sim_pids=()
plot_pids=()
proccount=0

# if "run_simulations" is disabled, "tmp/..." directories are expected to be pre-populated
if [ "$run_simulations" = true ]; then

	# enter ns3 directory to run simulations
	pushd $ns3
	
	# rebuild once before parallel deployments - avoids "compilation collision" between threads
	sudo ./waf build
	
	# sweep from 1 to N senders?
	sendrange='0'
	if [ "$sweepdegrees" == true ];
	then
		sendrange=$(seq 1 "$senders")
	else
		sendrange=("$senders")
	fi
	
	# Simulations With PBS
	for A in "${alphas[@]}";
	do
		#for S in "$sendrange";
		for S in $sendrange;
		do
			proccount=$(($proccount+1))
			if [ $proccount == $processors ]; then
				synchronization_barrier "${sim_pids[@]}"
				sim_pids=()
				proccount=1
			fi
			args="scratch/incasttopo"
			args+=" --apps=$flows"
			args+=" --buff=$buff"
			args+=" --sameBuff=$same_buff"
			args+=" --debug=$debug"
			args+=" --alpha=$A"
			args+=" --thresh=$thresh"
			#args+=" --thresh=80" // experimental
			args+=" --profile=6"
			args+=" --tag=a${A}_s${S}"
 			args+=" --nonblind=$nonblind"
			args+=" --incast_servers=$S"
			args+=" --incastFlowSize=$flowsize"
			echo "Running Sim with args: $args"
			sudo ./waf --run "$args" &> $repo/logs/incast/sim_a"$A"_s"$S".log & sim_pids+=("$!")
		done
	done
	
	# Simulations Without PBS
	if [ "$samethresh" = false ]; then
		thresh="$(($thresh*8))" # 8x DCTCP threshold for no-priority simulations
	fi
	for S in $sendrange;
	do
		proccount=$(($proccount+1))
		if [ $proccount == $processors ]; then
			synchronization_barrier "${sim_pids[@]}"
			sim_pids=()
			proccount=1
		fi
		args="scratch/incasttopo"
		args+=" --apps=$flows"
		args+=" --buff=$buff"
		args+=" --sameBuff=$same_buff"
		args+=" --debug=$debug"
		args+=" --usePbs=false"
		args+=" --thresh=$thresh"
		args+=" --profile=6"
		args+=" --tag=dctcp_s${S}"
		args+=" --incast_servers=$S"
		args+=" --incastFlowSize=$flowsize"
		echo "Running Sim with args: $args"
		sudo ./waf --run "$args" &> $repo/logs/incast/sim_dctcp_s"$S".log & sim_pids+=("$!")
	done
	
	
	# wait for simulations to complete
	echo "-I- incast_run_pipeline: simulations deployed..." > /dev/tty
	echo "-I- incast_run_pipeline: simulations deployed..."
	synchronization_barrier "${sim_pids[@]}"
	sim_finish=`date +%s`
	sim_runtime=$((sim_finish-start))
	echo "-I- incast_run_pipeline: simulations completed in $sim_runtime (s)." > /dev/tty
	echo "-I- incast_run_pipeline: simulations completed in $sim_runtime (s)."
	
	# move back into original directory to run graph-gen scripts
	popd
	
fi # if run_simulations

if [ "$run_simulations" = true ]; then
	# move ns3 simulation outputs into local tmp directory
	sudo mv $ns3/results/incast/* tmp/incast
fi

echo "-I- incast_run_pipeline: generating plots..." > /dev/tty
echo "-I- incast_run_pipeline: generating plots..."

# calculate priority distirbution histograms
for filepath in tmp/incast/*.prio; do
	proccount=$(($proccount+1))
	if [ $proccount == $processors ]; then
		synchronization_barrier "${plot_pids[@]}"
		plot_pids=()
		proccount=1
	fi
	filename="$(basename -- $filepath)"
	sudo ./scripts/histogram.py "$filepath" &> ./logs/incast/${filename}.log & plot_pids+=("$!")
done

# generate boxplots for dctcp and pbs
if [ "$sweepdegrees" == true ]; then
	sudo ./scripts/incast_whiskers.py tmp/incast/ &> ./logs/incast/incast_whiskers.log & plot_pids+=("$!")
	#sudo ./scripts/incast_flowsizes.py tmp/incast/ &> ./logs/incast/incast_flowsizes.log & plot_pids+=("$!")
	#sudo ./scripts/incast-fct-99.py tmp/incast/ &> ./logs/incast/incast_fct_99.log & plot_pids+=("$!")
else
	args=("tmp/incast/incast_dctcp_s${senders}.xml")
	for A in "${alphas[@]}"; do
		args+=("tmp/incast/incast_a${A}_s${senders}.xml")
	done
	sudo ./scripts/fct-cdf-incast.py "${args[@]}" &> ./logs/incast/incast_fct_cdf.log & plot_pids+=("$!")
fi

# wait for all plotting scripts to complete
synchronization_barrier "${plot_pids[@]}"
plot_finish=`date +%s`
plot_runtime=$((plot_finish-sim_finish))
echo "-I- incast_run_pipeline: remaining plots finished in $plot_runtime (s)." > /dev/tty
echo "-I- incast_run_pipeline: remaining plots finished in $plot_runtime (s)."

# move graphs into results folder
if [ "$sweepdegrees" == true ]; then
	sudo mv incast*.png results/incast/plots
	sudo mv *fairness.png results/incast/plots
	sudo mv *incast_sizes.png results/incast/plots
else
	sudo mv incast_fct_cdf.png results/incast/plots
fi

if [ "$upload" = true ]; then

	# copy results to gcloud storage
	echo "-I- incast_run_pipeline: transferring results to gcloud storage..." > /dev/tty
	echo "-I- incast_run_pipeline: transferring results to gcloud storage..."
	sudo rm -f /etc/boto.cfg
	sudo gsutil -m cp "$configfile" gs://homa-pbs/Incast_Simulations_$date/
	sudo gsutil -m cp "$logfile" gs://homa-pbs/Incast_Simulations_$date/
	sudo gsutil -m cp -r results/incast/* gs://homa-pbs/Incast_Simulations_$date/
	sudo gsutil -m cp -r logs/incast/* gs://homa-pbs/Incast_Simulations_$date/logs/
	sudo gsutil -m cp -r tmp/incast/*.xml gs://homa-pbs/Incast_Simulations_$date/data/
	sudo gsutil -m cp -r tmp/incast/*.pcap gs://homa-pbs/Incast_Simulations_$date/data/
	sudo gsutil -m cp -r tmp/incast/*prio* gs://homa-pbs/Incast_Simulations_$date/data/

fi # if upload

if [ "$clean" = true ]; then

	# clean out temporary files and results, but leave the logs
	echo "-I- incast_run_pipeline: removing local temporary files..." > /dev/tty
	echo "-I- incast_run_pipeline: removing local temporary files..."
	sudo rm -f tmp/incast/*
	sudo rm -f results/incast/plots/*
	sudo rm -f results/incast/data/*
	sudo rm -f $ns3/results/incast/*

fi # if clean

# print run stats
finish=`date +%s`
runtime=$((finish-start))
echo "-I- incast_run_pipeline: finished in $runtime (s)." > /dev/tty
echo "-I- incast_run_pipeline: finished in $runtime (s)."
echo "-I- incast_run_pipeline: output logged to: ${logfile}" > /dev/tty
echo "-I- incast_run_pipeline: output logged to: ${logfile}"

# bring output back to the terminal, exit
exec &>/dev/tty 
exit
